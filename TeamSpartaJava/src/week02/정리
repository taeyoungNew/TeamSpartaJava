1. 연산자의 종류
	산술연산자 : +, -, *, /, %(나머지), <<, >>
	비교연산자 : >, <, >=, <=, ==, !=
	논리연산자 : %%, ||, !
	대입연산자 : =, ++, --
	기타연산자 : (type), ? :, instanse of

2. [연산자 우선순위 : 산술 > 비교 > 논리 > 대입]
	연산자 ㅇ러개가 함께 있는 연산을 계산할 때는 우선순위가 있다.
	위 우선순위에 따라서 최종적인 응답값이 결정
	단 괄호로 감싸주면 괄호안의 연산이 최우선순위로 계산
	
3. 연산전에 두 피연산자의 타입이 다른 경우 타입을 일치시킨다.
	피연산자의 타입을 같게 일치시킨다 (둘중에 저장공간 크기가 더 큰 타입으로 일치)
	예) 피연산자의 타입이 int보다 작은 short타입이면 int로 변환
	예) 피연산자의 타입이 long보다 작은 int, short 등 타입이면 long으로 변환 
	예) 피연산자의 타입이 double 보다 작은 float, long, int 등 타입이면 double로 변환 
	다른 타입도 마찬가지


4. 비트연산 
	Byte를 8등분한것이 Bit
	Bit는 0, 1 등중의 하나의 값많을 저장하는 컴퓨터가 저장가능한 가장 작은 단위이다.
	가장 작은 단위이기 때문에 Bit연산이 가장 빠르다.
	0, 1값으로 산술연산을 하거나 비교연산을 할 수 있지만 비트연산을 통해 자릿수를 옮길수도 있다
	0101 => 1010
	이처럼 Bit의 자릿수를 옮기는 것을 비트연산이라고 한다.
	'<<'(왼쪽으로 자릿수 옮기기), '>>' (오른쪽으로 자릿수 옮기기)
	0, 1은 2진수 값이기 때문에
	- 자릿수를 왼쪽으로 옮기는 횟수만큼 2의 배수로 '곱셈'이 연산되는것과 동일
	- 자릿수를 오른쪽으로 옮기는횟수만큼 2의 배수로 '나눗셈'이 연산되는것과 동일
	
5. switch문
	switch문은 case문과 함께 사용하며 if문보다 좀더 가독성이 좋은 조건문 표현식이다
	피연산자는 한개에 대한 조건만 지원한다.
	switch문은 코드중복이 적다
	
6. 반복문 for문, while문, do-while문
	for문
		- 특정조건에 따라 연산을 반복해서 수행하고 싶을 떄 사용하는 문맥
		

7. 배열 
	